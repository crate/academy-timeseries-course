WEBVTT

00:00:00.040 --> 00:00:03.700
Indexing creates data structures
that improve the speed of data

00:00:03.700 --> 00:00:05.760
retrieval operations in a
database.

00:00:06.200 --> 00:00:09.879
In combination with sharding and
partitioning, proper indexing

00:00:09.879 --> 00:00:12.975
allows for efficient data
organization and fast data

00:00:12.975 --> 00:00:16.480
retrieval, crucial for effective
time series data analysis.

00:00:17.600 --> 00:00:21.090
To enable efficient aggregation,
grouping and search over

00:00:21.090 --> 00:00:24.520
billions of rows, CrateDB
combines multiple approaches.

00:00:24.800 --> 00:00:28.430
By default, all attributes are
indexed based on their respective

00:00:28.430 --> 00:00:29.520
active data types.

00:00:30.400 --> 00:00:33.565
This releases a lot of burden
from the operations team to

00:00:33.565 --> 00:00:36.950
figure out an optimal indexing
strategy that might need to be

00:00:36.950 --> 00:00:40.225
changed over time to ensure a
high query performance for ad

00:00:40.225 --> 00:00:40.880
hoc queries.

00:00:41.240 --> 00:00:44.335
That means queries that might
not have been anticipated when

00:00:44.335 --> 00:00:45.960
designing the indexing strategy.

00:00:47.320 --> 00:00:50.696
Memory mapped columnar storage
allows for fast aggregations

00:00:50.696 --> 00:00:54.130
over huge amounts of data due to
better leverage of existing

00:00:54.130 --> 00:00:57.112
hardware and automatic
optimization for data that is

00:00:57.112 --> 00:00:58.520
accessed very frequently.

00:00:59.880 --> 00:01:03.422
Numeric values leverage blocked
KD trees which is an IO-

00:01:03.422 --> 00:01:05.320
efficient dynamic search tree.

00:01:06.160 --> 00:01:09.644
Textual data leverages and
inverted index and full text

00:01:09.644 --> 00:01:11.760
indexes can be created on
demand.

00:01:13.160 --> 00:01:15.960
Vectors leverage and
hierarchical navigable small

00:01:15.960 --> 00:01:19.040
world index for efficient
approximate nearest neighbor

00:01:19.040 --> 00:01:22.232
search using an Euclidean
distance as default similarity

00:01:22.232 --> 00:01:22.680
measure.

00:01:23.520 --> 00:01:26.400
We will dig into more details on
the following slides.

00:01:27.920 --> 00:01:31.898
CrateDB uses columnar storage
which stores data table columns

00:01:31.898 --> 00:01:35.434
separately as opposed to row
based storage which stores

00:01:35.434 --> 00:01:36.760
entire rows together.

00:01:37.200 --> 00:01:40.720
This arrangement offers several
advantages for time series data.

00:01:41.480 --> 00:01:45.017
Efficient data scanning: 
Queries, aggregations and sort

00:01:45.017 --> 00:01:48.871
operations that access only a
subset of table columns, which

00:01:48.871 --> 00:01:52.598
is common in analytics, can scan
the data more efficiently

00:01:52.598 --> 00:01:56.200
because only the relevant
columns are read from storage.

00:01:57.040 --> 00:02:00.624
Better compression: Since each
column typically contains

00:02:00.624 --> 00:02:01.840
similar data types.

00:02:02.240 --> 00:02:05.341
Columnar storage can apply more
effective compression

00:02:05.341 --> 00:02:08.328
techniques, reducing storage
costs and improving IO

00:02:08.328 --> 00:02:08.960
efficiency.

00:02:09.640 --> 00:02:13.472
Improved memory handling: CrateDB
uses memory mapped columnar

00:02:13.472 --> 00:02:17.120
storage files which enables very
fast reads for frequently

00:02:17.120 --> 00:02:20.520
accessed columns as they can be
delivered from memory.

00:02:21.160 --> 00:02:24.405
Data from disk can be read and
made available for processing

00:02:24.405 --> 00:02:26.800
very fast for less frequently
accessed data.

00:02:28.000 --> 00:02:31.482
In our example, the columnar
store maps the value of record

00:02:31.482 --> 00:02:35.023
IDs to the temperature recorded
at each weather station with

00:02:35.023 --> 00:02:35.720
dock values.

00:02:35.960 --> 00:02:39.153
When a query requires
aggregation such as calculating

00:02:39.153 --> 00:02:42.643
the average temperature, CrateDB
will directly access the

00:02:42.643 --> 00:02:44.240
temperature columns values.

00:02:44.800 --> 00:02:48.208
This direct access path
significantly speeds up query

00:02:48.208 --> 00:02:48.840
execution.

00:02:49.360 --> 00:02:52.616
This approach is highly
beneficial for time series data

00:02:52.616 --> 00:02:56.222
where data sets are often vast
and queries frequently involve

00:02:56.222 --> 00:02:58.200
aggregations over time
intervals.

00:02:58.960 --> 00:03:02.314
The combination of fast range
scans, as we will outline on the

00:03:02.314 --> 00:03:05.616
next slide, makes this approach
very fast, even when combined

00:03:05.616 --> 00:03:07.320
with additional filter criteria.

00:03:08.360 --> 00:03:12.380
CrateDB employs so-called block
KD trees, which are a special

00:03:12.380 --> 00:03:16.082
version of binary search trees
to enhance the indexing of

00:03:16.082 --> 00:03:20.103
numerical values such as time
stamps, IP addresses, geospatial

00:03:20.103 --> 00:03:22.720
data, and of course, measurement
values.

00:03:23.400 --> 00:03:26.940
The way how the data structure
is designed ensures high query

00:03:26.940 --> 00:03:30.194
performance by dividing the
search space in half at each

00:03:30.194 --> 00:03:30.480
step.

00:03:30.800 --> 00:03:34.403
They offer logarithmic search
time complexity, especially for

00:03:34.403 --> 00:03:37.831
filtering and range queries,
which are very common in time

00:03:37.831 --> 00:03:41.376
series analytics, for example
when selecting a certain range

00:03:41.376 --> 00:03:44.630
of time stamps, slicing by
device IDs, or filtering for

00:03:44.630 --> 00:03:46.200
certain measurement values.

00:03:47.080 --> 00:03:50.227
When dealing with geospatial
data, which is inherently

00:03:50.227 --> 00:03:53.891
multidimensional, the importance
of block KD trees becomes even

00:03:53.891 --> 00:03:57.267
more pronounced to handle
complex queries across longitude

00:03:57.267 --> 00:04:00.473
and latitude, as well as
different levels of geospatial

00:04:00.473 --> 00:04:01.160
granularity.

00:04:02.440 --> 00:04:06.268
In addition, BKD trees are
especially good at indexing data

00:04:06.268 --> 00:04:07.800
that is stored on disks.

00:04:08.680 --> 00:04:12.478
For range queries and partial
match queries, BKD trees help in

00:04:12.478 --> 00:04:16.215
quickly identifying the relevant
disk blocks without scanning

00:04:16.215 --> 00:04:17.120
unrelated data.

00:04:18.080 --> 00:04:21.352
Furthermore, they partition data
in such a way that related data

00:04:21.352 --> 00:04:23.920
points are stored close to each
other on the disk.

00:04:24.800 --> 00:04:28.602
This spatial locality minimizes
the number of disk pages that

00:04:28.602 --> 00:04:32.405
need to be read as more relevant
data is loaded with fewer IO

00:04:32.405 --> 00:04:33.080
operations.

00:04:34.480 --> 00:04:37.985
BKD trees remain efficient for
high volume and bulk loading

00:04:37.985 --> 00:04:41.665
operations, which is critical
for time series data where large

00:04:41.665 --> 00:04:45.229
volumes of data are inserted and
kept in the database, which

00:04:45.229 --> 00:04:47.800
means the index constantly grows
over time.

00:04:48.800 --> 00:04:52.343
In CrateDB, an inverted index
is a data structure that maps

00:04:52.343 --> 00:04:55.480
the content to its location in a
table or a document.

00:04:56.760 --> 00:04:59.240
The plain index is used for
exact matching.

00:04:59.720 --> 00:05:02.772
It's straightforward and fast
for queries that know the exact

00:05:02.772 --> 00:05:04.200
phrases they are looking for.

00:05:04.680 --> 00:05:09.542
In our case, we have an index
that maps each weather station

00:05:09.542 --> 00:05:14.404
to an ID such as Berlin West to ID
1, Berlin South to ID 2, and

00:05:14.404 --> 00:05:15.759
Zurich South to ID 3.

00:05:16.400 --> 00:05:19.760
This type of index is ideal for
direct and unambiguous lookups.

00:05:20.520 --> 00:05:24.228
On the other hand, the full text
index supports more complex

00:05:24.228 --> 00:05:27.936
search operations, allowing for
searches within the text for

00:05:27.936 --> 00:05:31.280
partial matches and variations.
In the full text index

00:05:31.280 --> 00:05:34.350
example, the weather station
column has been indexed to

00:05:34.350 --> 00:05:37.640
identify the occurrence of terms
across different stations.

00:05:37.920 --> 00:05:41.624
For instance, the term Berlin is
associated with IDs 1 and 2,

00:05:41.624 --> 00:05:45.160
which correspond to Berlin West
and Berlin South respectively.

00:05:45.600 --> 00:05:50.768
Similarly, South is linked to IDs
2 and 3, West to ID 2, and

00:05:50.768 --> 00:05:52.040
Zurich to ID 3.

00:05:52.480 --> 00:05:55.952
This enables users to search for
a term like Berlin and find all

00:05:55.952 --> 00:05:59.158
related stations in the city of
Berlin, regardless of their

00:05:59.158 --> 00:05:59.800
exact names.

00:06:01.160 --> 00:06:04.902
Full text search, which goes
beyond simple pattern matching,

00:06:04.902 --> 00:06:08.583
is possible by creating full
text indices which can also be

00:06:08.583 --> 00:06:11.957
composite index allowing the
indexing of multiple text

00:06:11.957 --> 00:06:13.000
columns together.

00:06:14.400 --> 00:06:17.936
The example demonstrates how to
create a table with a composite

00:06:17.936 --> 00:06:21.527
full text index on the name and
description columns and then use

00:06:21.527 --> 00:06:23.240
that index to perform a search.

00:06:24.120 --> 00:06:27.749
Using custom analyzers we can
refine the text tokenization

00:06:27.749 --> 00:06:31.440
process to different languages
or specialized requirements.

00:06:32.280 --> 00:06:35.672
In our example, we've used a
standard analyzer tailored to

00:06:35.672 --> 00:06:36.880
the English language.

00:06:37.760 --> 00:06:41.321
Following the tables creation,
we perform a full text search

00:06:41.321 --> 00:06:44.649
where the term key station is
used to query the stations

00:06:44.649 --> 00:06:45.000
table.

00:06:45.280 --> 00:06:48.480
We want to identify important
weather stations for which we

00:06:48.480 --> 00:06:51.680
can find a text like Key station
in the name or description

00:06:51.680 --> 00:06:52.000
field.

00:06:52.800 --> 00:06:55.900
The output is sorted by a
relevant score which assesses

00:06:55.900 --> 00:06:59.000
the degree to which each entry
matches the search term.

00:07:00.720 --> 00:07:04.487
Notably, Berlin West ranks higher
than Berlin South, indicating a

00:07:04.487 --> 00:07:07.680
stronger association with the
phrase key station.

00:07:07.720 --> 00:07:10.905
As per the full text searches
analysis, we can see the

00:07:10.905 --> 00:07:13.280
difference in the description
attribute.

00:07:13.560 --> 00:07:17.138
Both of them contains the term
station, but only Berlin West is

00:07:17.138 --> 00:07:18.840
called a key weather station.

00:07:20.200 --> 00:07:23.580
CrateDB uses standard SQL,
making it easier to integrate

00:07:23.580 --> 00:07:26.786
full text search with other
types of filters and query

00:07:26.786 --> 00:07:30.400
criteria, and it can execute a
variety of full text searches.

00:07:31.280 --> 00:07:34.585
Fuzzy searches allow for a
margin of error, accommodating

00:07:34.585 --> 00:07:37.720
slight misspellings or
variations in the search terms.

00:07:38.680 --> 00:07:41.853
Phrase searches target exact
sequences of words, and

00:07:41.853 --> 00:07:45.265
attribute boosting prioritizes
certain text over others,

00:07:45.265 --> 00:07:47.840
enhancing the relevance of
search results.

00:07:49.200 --> 00:07:52.153
With the presented set of
indexes, CrateDB can

00:07:52.153 --> 00:07:55.661
efficiently support advanced
time series use cases, from

00:07:55.661 --> 00:07:59.169
filtering and slicing the data
to advanced full text and

00:07:59.169 --> 00:08:00.400
geospatial searches.