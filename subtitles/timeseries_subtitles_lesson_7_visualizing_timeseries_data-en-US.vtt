WEBVTT

00:00:00.080 --> 00:00:03.590
When working with time series
data in CrateDB, visualization

00:00:03.590 --> 00:00:06.987
is a key aspect that aids in
understanding the patterns and

00:00:06.987 --> 00:00:08.120
trends in your data.

00:00:09.040 --> 00:00:12.416
One of the most popular tools
for this purpose is Grafana,

00:00:12.416 --> 00:00:15.963
which provides a powerful and
intuitive platform for creating

00:00:15.963 --> 00:00:17.280
and sharing dashboards.

00:00:18.160 --> 00:00:21.891
In combination with CrateDB's
robust handling of time series

00:00:21.891 --> 00:00:25.383
data, Grafana allows you to
create dynamic visualizations

00:00:25.383 --> 00:00:28.753
that can provide valuable
insights, making it easier to

00:00:28.753 --> 00:00:30.679
analyze and interpret your data.

00:00:31.800 --> 00:00:34.883
To visualize your data in
Grafana, you'll first need to

00:00:34.883 --> 00:00:36.040
set up a data source.

00:00:36.920 --> 00:00:41.110
Select the PostgreSQL type as
CrateDB is compatible with the

00:00:41.110 --> 00:00:42.800
PostgreSQL wire protocol.

00:00:43.640 --> 00:00:47.240
Next, enter the necessary
parameters for your database.

00:00:48.080 --> 00:00:52.043
This includes information such
as the host, database name,

00:00:52.043 --> 00:00:53.320
user, and password.

00:00:54.160 --> 00:00:57.779
This process connects Grafana to
your database, allowing it to

00:00:57.779 --> 00:00:59.560
retrieve and display your data.

00:01:00.600 --> 00:01:02.400
Now let's see how it works in
practice.

00:01:03.000 --> 00:01:06.402
1. Open Grafana and navigate
to connections, then data

00:01:06.402 --> 00:01:06.880
sources.

00:01:07.600 --> 00:01:09.800
2. This lists all data
sources.

00:01:10.120 --> 00:01:13.373
The connection to CrateDB is
established via the PostgreSQL

00:01:13.373 --> 00:01:14.120
wire protocol.

00:01:14.920 --> 00:01:15.360
3.

00:01:15.800 --> 00:01:19.663
The connection details contains
the host URL, database name,

00:01:19.663 --> 00:01:21.120
username, and password.

00:01:21.560 --> 00:01:24.965
The parameters depend on whether
you are connecting to a CrateDB

00:01:24.965 --> 00:01:26.720
cloud instance or local
instance.

00:01:27.480 --> 00:01:32.749
4. The TLS/SSL mode is set to
verify full for a CrateDB Cloud

00:01:32.749 --> 00:01:33.560
cluster.

00:01:34.120 --> 00:01:37.059
5. Finally, we can test the
connection to ensure that

00:01:37.059 --> 00:01:40.633
Grafana can communicate with
CrateDB and save the connection

00:01:40.633 --> 00:01:41.440
configuration.

00:01:43.160 --> 00:01:46.373
Now we are ready to explore an
example dashboard and the

00:01:46.373 --> 00:01:47.840
queries used to create it.

00:01:48.640 --> 00:01:51.720
This is the example dashboard
for the weather data.

00:01:52.240 --> 00:01:54.971
The first panels tell us how
many entries are in the data

00:01:54.971 --> 00:01:55.160
set.

00:01:55.440 --> 00:01:58.296
How many cities are covered and
when the first and last

00:01:58.296 --> 00:01:59.520
measurements took place.

00:02:00.000 --> 00:02:03.852
If we go to Inspect > Query and
move to the Query tab, we can

00:02:03.852 --> 00:02:07.320
see which query is used to
generate this information.

00:02:07.840 --> 00:02:11.097
In the first panel we show the
number of measurements as a

00:02:11.097 --> 00:02:14.630
count of all time stamps and the
number of cities as a count of

00:02:14.630 --> 00:02:15.680
distinct locations.

00:02:16.440 --> 00:02:19.650
The table on the dashboard tells
us for each location what was

00:02:19.650 --> 00:02:22.861
the highest recorded temperature
and when this temperature was

00:02:22.861 --> 00:02:23.320
recorded.

00:02:24.000 --> 00:02:26.120
Check the query that generates
this data.

00:02:26.720 --> 00:02:27.960
In the SELECT statement.

00:02:28.200 --> 00:02:31.374
We use the max aggregation
function to find the highest

00:02:31.374 --> 00:02:34.720
temperature and max_by to find a
timestamp for this value.

00:02:35.200 --> 00:02:37.360
The results are also grouped by
location.

00:02:39.160 --> 00:02:42.581
The graph next to the table
tells us how the interpolated

00:02:42.581 --> 00:02:45.000
temperature compares to the real
values.

00:02:45.920 --> 00:02:49.418
It is a common problem when
dealing with time series data to

00:02:49.418 --> 00:02:50.680
handle missing values.

00:02:51.400 --> 00:02:54.218
Such occurrences are common,
perhaps due to a sensor

00:02:54.218 --> 00:02:55.760
malfunction or disconnection.

00:02:56.360 --> 00:02:59.360
To address this, the missing
values need to be filled in.

00:03:00.160 --> 00:03:03.712
CreateDB can employ another
useful tool, Window functions

00:03:03.712 --> 00:03:06.000
paired with the IGNORE NULLS
feature.

00:03:06.760 --> 00:03:08.440
Within a common table
expression

00:03:08.720 --> 00:03:12.307
we utilize window functions to
spot the next and prior non null

00:03:12.307 --> 00:03:15.839
temperature recordings and then
compute the arithmetic mean to

00:03:15.839 --> 00:03:16.680
bridge the gap.

00:03:17.160 --> 00:03:19.680
You can see how the query looks
in the query window.

00:03:21.520 --> 00:03:23.200
The next graphs show rolling
averages.

00:03:23.960 --> 00:03:27.400
They are crucial in time series
analysis because they help

00:03:27.400 --> 00:03:30.082
smooth out short term
fluctuations and reveal

00:03:30.082 --> 00:03:33.639
underlying trends by averaging
data points over a specified period.

00:03:34.360 --> 00:03:37.552
If you again check the query
window for this graph, you can

00:03:37.552 --> 00:03:40.000
see the query for computing
rolling averages.

00:03:40.880 --> 00:03:44.807
Rolling averages are computed
for all metrics temperature,

00:03:44.807 --> 00:03:49.200
humidity and wind speed by using
the window of the last 10 and 20

00:03:49.200 --> 00:03:49.800
readings.

00:03:51.640 --> 00:03:55.246
Last but not least, in CrateDB
you can effectively query

00:03:55.246 --> 00:03:58.978
geospatial data and this is
shown in the last piece of this

00:03:58.978 --> 00:03:59.600
dashboard.

00:04:00.040 --> 00:04:03.081
The map shows all weather
stations that are within a

00:04:03.081 --> 00:04:05.320
radius of 1000 kilometers from
Berlin.

00:04:06.080 --> 00:04:09.587
Let's check the query itself
that produces the data to show

00:04:09.587 --> 00:04:10.640
points on the map.

00:04:10.640 --> 00:04:14.208
We need latitude and longitude
information from each point

00:04:14.208 --> 00:04:17.655
which is easy to get due to
existing scalar functions in

00:04:17.655 --> 00:04:18.200
CrateDB.

00:04:18.920 --> 00:04:22.648
In the WHERE clause, we use the
distance function to filter only

00:04:22.648 --> 00:04:25.000
those points that satisfy our
condition.

00:04:25.760 --> 00:04:27.840
The result illustrates four
locations.

00:04:29.040 --> 00:04:32.311
With this, we are closing our
overview on time series

00:04:32.311 --> 00:04:33.160
visualization.

00:04:34.000 --> 00:04:37.546
You have learned how to use
Grafana with CrateDB to query,

00:04:37.546 --> 00:04:40.680
visualize and further analyze
your time series data.